{"version":3,"file":"ModelDirective.js","sourceRoot":"","sources":["../../src/ui/utils/ModelDirective.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,SAAS,EAAC,MAAM,kBAAkB,CAAC;AACtD,OAAO,EAAC,OAAO,EAAc,MAAM,YAAY,CAAC;AAGhD,MAAM,KAAK,GAAG,IAAI,OAAO,EAAE,CAAC;AAK5B;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,SAAS,CAC5B,KAAM,SAAQ,SAAS;IACrB,MAAM,CAAC,SAAmB,EAAE,OAAgB;QAC1C,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,IAAiB,EAAE,CAAC,QAAQ,EAAE,MAAM,CAA6B;QACtE,MAAM,OAAO,GACX,IAAI,CAAC,OAAwC,CAAC;QAChD,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC;QACnC,IAAI,MAAe,CAAC;QAEpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACvB,sFAAsF;YACtF,MAAM,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACxD,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAE3B,kCAAkC;YAClC,OAAO,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,EAAE,EAAE,EAAE;gBACrD,MAAM,EAAC,QAAQ,EAAC,GAAI,EAAkB,CAAC,MAAM,CAAC;gBAC9C,2CAA2C;gBAC3C,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;oBAC3B,IAAI,CAAC,MAAM,EAAE;wBACX,6CAA6C;wBAC7C,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;qBACpC;iBACF;gBACD,qCAAqC;qBAChC;oBACH,IAAI,MAAM,GAAG,QAAQ,CAAC;oBACtB,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;oBAC7C,IAAI,CAAC,OAAO,CAAC,CAAC,EAAmB,EAAE,CAAS,EAAE,EAAE;wBAC9C,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;4BACzB,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;4BACzB,OAAO;yBACR;wBACD,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC;oBAClC,CAAC,CAAC,CAAC;iBACJ;gBACD,gEAAgE;YAClE,CAAC,CAAC,CAAC;SACJ;QACD,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAE5B,oCAAoC;QACpC,IAAI,MAAM,EAAE;YACV,OAAO,CAAC,UAAU,GAAG,QAAQ,CAAC;SAC/B;aAAM;YACL,OAAO,CAAC,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;SACpC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;CACF,CACF,CAAC","sourcesContent":["import {directive, Directive} from 'lit/directive.js';\nimport {nothing, ElementPart} from '@lion/core';\nimport {FormControlHost} from '@lion/form-core/types/FormControlMixinTypes';\n\nconst cache = new WeakMap();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ModelObj = {[key: string]: any};\n\n/**\n * Directive that introduces two way binding to Lion forms.\n *\n * @example\n * ```js\n * const myModel = {\n *  myAmount: 1234.56,\n *  fields: {\n *   emailAddress: 'a@b.c',\n *  },\n * };\n * ```\n * ```html\n * <lion-input-amount name=\"myAmount\" ${model(myModel)}></lion-input-amount>\n * <lion-fieldset name=\"fields\">\n *   <lion-input-email name=\"myEmail\" ${model(myModel.fields, 'emailAddress')}></lion-input-email>\n * </lion-fieldset>\n *```\n * ```html\n * <lion-form ${model(myModel)}>\n *   <lion-input-amount name=\"myAmount\"></lion-input-amount>\n *   <lion-fieldset name=\"fields\">\n *     <lion-input-email name=\"emailAddress\"></lion-input-email>\n *   </lion-fieldset>\n * </lion-form>\n *```\n * @param {object} modelObj will be used to store reference to attribute names like #myElement\n */\nexport const model = directive(\n  class extends Directive {\n    render(_modelObj: ModelObj, _objKey?: string) {\n      return nothing;\n    }\n\n    update(part: ElementPart, [modelObj, objKey]: Parameters<this['render']>) {\n      const element: HTMLElement & FormControlHost =\n        part.element as HTMLElement & FormControlHost;\n      const key = objKey || element.name;\n      let isForm: boolean;\n\n      if (!cache.has(element)) {\n        // TODO: make this contract less fuzzy, but without requiring LionForm as a dependency\n        isForm = !element.name || !element.hasAttribute('role');\n        cache.set(element, isForm);\n\n        // [1] Upwards sync: form to model\n        element.addEventListener('model-value-changed', (ev) => {\n          const {formPath} = (ev as CustomEvent).detail;\n          // [1a] ModelValue of currentTarget changed\n          if (formPath[0] === element) {\n            if (!isForm) {\n              // eslint-disable-next-line no-param-reassign\n              modelObj[key] = element.modelValue;\n            }\n          }\n          // [1b] ModelValue of a child changed\n          else {\n            let objLvl = modelObj;\n            const path = formPath.slice(0, -1).reverse();\n            path.forEach((el: FormControlHost, i: number) => {\n              if (i !== path.length - 1) {\n                objLvl = objLvl[el.name];\n                return;\n              }\n              objLvl[el.name] = el.modelValue;\n            });\n          }\n          // TODO: alternatively (other directive?) connect to Redux store\n        });\n      }\n      isForm = cache.get(element);\n\n      // [2] Downwards sync: model to form\n      if (isForm) {\n        element.modelValue = modelObj;\n      } else {\n        element.modelValue = modelObj[key];\n      }\n\n      return nothing;\n    }\n  }\n);\n"]}