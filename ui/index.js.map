{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/ui/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {customElement, property} from 'lit/decorators.js';\nimport {html, dedupeMixin, PropertyValues} from '@lion/core';\n// import {renderToNode} from '@lion/helpers';\nimport {LionSelectRich} from '@lion/select-rich';\nimport {LionOption} from '@lion/listbox';\nimport {LionInput} from '@lion/input';\nimport {LionInputAmount} from '@lion/input-amount';\n\nimport {LionForm} from '@lion/form';\nimport {ScopedLightDomController} from './ScopedLightDomController';\n\n// import {MFormControlMixin} from './types/MFormControlMixinTypes';\n\nexport type MFormControlMixin =\n  typeof import('./types/MFormControlMixinTypes').MFormControlMixinImplementation;\n\n/**\n * These styles are hardcoded for now. They should be derived from a transformation processs of\n * a style library's output (.css) file like Material Design, Bootstrap etc.\n * The transformation process should be annotated, so the following can be transformated:\n *\n * - host to :host selectors. Annotated via:\n *   @lion-style-adapter({ host: '.mdc-text-field' })\n * - class based states to 'Lion states' (attributes). Annotated via:\n *   @lion-style-adapter({ states: { '[shows-feedback-for~=\"error\"]': '.mdc-text-field--invalid' } })\n * - light dom to ::slotted selectors\n *   @lion-style-adapter({ slots: { label: '.mdc-floating-label' } })\n */\n// const formControlStyles = css``;\n\nconst MFormControlMixinImplementation: MFormControlMixin = (superClass) =>\n  // @ts-expect-error\n  class MFormControl extends superClass {\n    /**\n     * @override Here we completely override the templates defined in FormControlMixin.\n     * This means we are in control of all the html and all _subTemplate functions (like _labelTemplate) can be ignored.\n     * Whenever such a template is overridden in a Lion class or Mixin, it will have no effect anymore and, if needed functionality wise\n     * (for instance for adding an overlay), it should be overridden again.\n     *\n     * Note that we need to incorporate all functional hooks (slots and refs) as exposed by Lion's FormControlMixin\n     * @returns {TemplateResult}\n     */\n    render() {\n      return this._mainTemplate();\n    }\n\n    _mainTemplate() {\n      return html` <div class=\"mdc-text-field \">\n        <span class=\"mdc-text-field__ripple\"></span>\n        <slot name=\"label\"></slot>\n        <slot name=\"prefix\"></slot>\n        ${this._inputTemplate()}\n        <slot name=\"suffix\"></slot>\n        <span class=\"mdc-line-ripple\"></span>\n        <slot name=\"help-text\"></slot>\n        <slot name=\"validation-feedback\"></slot>\n      </div>`;\n    }\n\n    _inputTemplate() {\n      return html`<slot name=\"input\"></slot>`;\n    }\n\n    // slots = {\n    //   ...(super.slots || {}),\n    // };\n  };\n\nexport const MFormControlMixin = dedupeMixin(MFormControlMixinImplementation);\n\n@customElement('m-select-rich')\nexport class MSelectRich extends MFormControlMixin(LionSelectRich) {\n  // TODO: move to Lion\n  constructor() {\n    super();\n    new ScopedLightDomController(this, [\n      'lion-validation-feedback',\n      'lion-select-invoker',\n      'lion-options',\n    ]);\n  }\n\n  /**\n   * TODO: add refs via param\n   * @returns {TemplateResult}\n   */\n  _inputTemplate() {\n    return html`\n      <div class=\"input-group__input\">\n        <slot name=\"invoker\"></slot>\n        <div id=\"overlay-content-node-wrapper\">\n          <slot name=\"input\"></slot>\n          <slot id=\"options-outlet\"></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\n@customElement('m-option')\nexport class MOption extends LionOption {}\n\n@customElement('m-form')\nexport class MForm extends LionForm {}\n\n@customElement('m-input')\nexport class MInput extends LionInput {}\n\nconst parseNumberString = (viewValue: string) => Number(viewValue);\nconst formatNumber = (modelValue: number) => `${modelValue}`;\nexport class LionInputNumber extends LionInput {\n  @property({type: Number})\n  step = NaN;\n\n  @property({type: Number})\n  min = NaN;\n\n  @property({type: Number})\n  max = NaN;\n\n  constructor() {\n    super();\n    this.type = 'number';\n    this.parser = parseNumberString;\n    this.deserializer = parseNumberString;\n    this.serializer = formatNumber;\n    this.formatter = formatNumber;\n  }\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n\n    if (changedProperties.has('step')) {\n      // @ts-expect-error fix in LionInput\n      this._inputNode.step = `${this.step}`;\n    }\n    if (changedProperties.has('min')) {\n      // @ts-expect-error fix in LionInput\n      this._inputNode.min = `${this.min}`;\n    }\n    if (changedProperties.has('max')) {\n      // @ts-expect-error fix in LionInput\n      this._inputNode.max = `${this.max}`;\n    }\n  }\n}\n\n@customElement('m-input-number')\nexport class MInputNumber extends LionInputNumber {}\n\n@customElement('m-input-amount')\nexport class MInputAmount extends LionInputAmount {\n  @property({type: Number})\n  step = NaN;\n\n  @property({type: Number})\n  min = NaN;\n\n  @property({type: Number})\n  max = NaN;\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n\n    if (changedProperties.has('step')) {\n      // @ts-expect-error fix in LionInput\n      this._inputNode.step = `${this.step}`;\n    }\n    if (changedProperties.has('min')) {\n      // @ts-expect-error fix in LionInput\n      this._inputNode.min = `${this.min}`;\n    }\n    if (changedProperties.has('max')) {\n      // @ts-expect-error fix in LionInput\n      this._inputNode.max = `${this.max}`;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'm-select-rich': MSelectRich;\n  }\n  interface HTMLElementTagNameMap {\n    'm-option': MOption;\n  }\n  interface HTMLElementTagNameMap {\n    'm-form': MForm;\n  }\n}\n"]}